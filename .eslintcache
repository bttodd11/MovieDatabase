[{"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/index.js":"1","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/App.js":"2","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/reportWebVitals.js":"3","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Title/Title.js":"4","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Search/Search.js":"5","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/MovieInfo/MovieInfo.js":"6","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Error/Error.js":"7"},{"size":547,"mtime":1609123553366,"results":"8","hashOfConfig":"9"},{"size":224,"mtime":1615168473994,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1609088171872,"results":"11","hashOfConfig":"9"},{"size":211,"mtime":1611034555098,"results":"12","hashOfConfig":"9"},{"size":5424,"mtime":1613887241432,"results":"13","hashOfConfig":"9"},{"size":4344,"mtime":1615177122888,"results":"14","hashOfConfig":"9"},{"size":479,"mtime":1612323835126,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"lc78hj",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/index.js",[],["34","35"],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/App.js",[],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/reportWebVitals.js",[],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Title/Title.js",[],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Search/Search.js",["36","37","38","39","40","41","42","43","44","45","46","47"],"import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col, Badge } from 'react-bootstrap';\nimport MovieInfo from '../MovieInfo/MovieInfo';\nimport MovieLogo from '../Search/img/moviePng.png';\nimport Error from '../Error/Error';\nimport './Search.css';\n\n\n\n\n\nconst Search = () => {\n\n  // Setting our hooks \n  let [movieTitle, setMovieTitle] = useState(\"\")\n  let [currentMovieOptions, setCurrentMovieOptions] = useState([]);\n  let [pageNation, setPageNation] = useState(1);\n  let [selectedMovie, setSelectedMovie] = useState([]);\n  let [datafailure, setDataFailure] = useState(false);\n  let omdbApi = 'http://www.omdbapi.com/?apikey=2c533baf&t=';\n  let nyTimesApi = 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?query=';\n  let apiKey = '&api-key=vKMNXxALAeCJBsOuNv1USvjhAHkXhIFJ'\n  let fullMovieData = {};\n\n\n\n\n  // Setting the movie title user input\n  let movieTitleInput = (event) => {\n    setMovieTitle(event.target.value)\n  }\n\n  // Fetch call for OMDB Database\n  let getOmdbObject = (movieTitle) => {\n    return new Promise((resolve, reject) => {\n      omdbApi = omdbApi + movieTitle;\n      resolve(fetch(omdbApi).then(response => response.json())\n        .then(omdbData => {\n          return omdbData;\n        }))\n\n    })\n  }\n\n  // Fetch call for NY Times Database\n  let getNyTimesObject = (movieTitle, offset) => {\n    return new Promise((resolve, reject) => {\n      // If an offset is present we will need to change the API\n      if (offset) {\n        nyTimesApi = nyTimesApi + movieTitle + '&offset=' + offset + apiKey;\n      }\n      else {\n        nyTimesApi = nyTimesApi + movieTitle + apiKey;\n      }\n\n      // Fetch call for NY Times API\n      resolve(fetch(nyTimesApi).then(response => response.json())\n        .then(nyTimesData => {\n          return nyTimesData.results;\n        })\n      )\n    })\n  }\n\n\n  // Fetch the data from our first API call with the selected movie\n  let fetchData = (movieTitle) => {\n    return Promise.all([getNyTimesObject(movieTitle), getOmdbObject(movieTitle)]).then((movies => {\n\n      if(movies[0] == null || movies[1].Response == false){\n        setDataFailure(true);\n        return;\n      }\n\n      for (var index = 0; index < movies[0].length; index++) {\n         // Setting movie title\n        movieTitle = movieTitle.replace(/\\s/g, '').toLowerCase();\n        let currentMovieTitle = movies[0][index].display_title.replace(/\\s/g, '').toLowerCase();\n        \n        if (currentMovieTitle == movieTitle) {\n          fullMovieData = {\n            ...movies[1],\n            ...movies[0][index]\n          }\n\n          setSelectedMovie(fullMovieData)\n          return;\n        }\n      }\n      setCurrentMovieOptions(movies[0])\n        // Changing the offset of the search results\n      setPageNation(pageNation + 1)\n\n    }))\n  }\n  \n \n  // Fetch call to change the offset to get the next movie titles\n  let pageNationOffset = (movieTitle) => {\n   return Promise.all([getNyTimesObject(movieTitle, pageNation)]).then((movieOptions => {\n      setCurrentMovieOptions(movieOptions[0])\n      setPageNation(pageNation + 1)\n   }))}\n\n\n\n\n\n  return (\n    <div id=\"searchSection\">\n      {selectedMovie.length == 0 && datafailure == false ?\n        <div>\n          {currentMovieOptions.length == 0 && selectedMovie.length == 0 ? \n          <div className=\"imageDiv\">\n        <img className=\"movieLogo\" src={MovieLogo}  />\n            </div>\n            : null }\n          <Form>\n            <Form.Group>\n              {currentMovieOptions.length == 0 ? <FormControl className=\"searchBar\"\n                value={movieTitle}\n                onChange={movieTitleInput}\n                placeholder=\"Enter Movie Title\" />\n                : null}\n              {currentMovieOptions.length != 0 ?\n              <div>\n                <Container>\n           \n                  <h6 className=\"movieOptionTitle\">Similar Movie Title Names</h6>\n                  <Row>\n                    {currentMovieOptions.map(movies =>\n                      (<Col md=\"4\">\n                        <span onClick={() => {fetchData(movies.display_title)}}><p className=\"movieNames\">{movies.display_title}</p></span>\n                      </Col>\n                      ))}\n                  </Row>\n                  <Row>\n                    <Container>\n                      <Row>\n                        {currentMovieOptions.length !== 0 ? <Button onClick={() => pageNationOffset(movieTitle)} className=\"nextPageButton\" size=\"sm\" variant=\"primary\">Next Page</Button> : null}\n                      </Row> \n                    </Container>\n                  </Row>\n                </Container>\n              </div> : null }\n              <br />\n              <Form.Text className=\"text-muted\">\n                Created by :  Brian Todd\n          </Form.Text>\n            </Form.Group>\n          </Form>\n          <div className=\"d-flex justify-content-center\">\n          {currentMovieOptions.length == 0 ? <Button onClick={() => fetchData(movieTitle)} className=\"searchButton\" variant=\"outline-info\">Search</Button> : null}\n          </div>\n        </div>\n        : null}\n        { datafailure == false ? \n      <div>\n        <MovieInfo selected={selectedMovie} />\n      </div> :\n      <div>\n        <Error />\n        </div>\n}\n    </div>\n  )\n}\n\nexport default Search;\n\n","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/MovieInfo/MovieInfo.js",["48","49","50","51","52","53","54","55","56","57","58","59"],"import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { ExternalLink } from \"react-external-link\";\nimport TypeIt from \"typeit-react\";\nimport nyTimesLogo from \"./img/nyTimesLogo.png\";\nimport star from \"./img/starPng.png\";\nimport line from \"./img/straightLine.png\";\nimport \"./MovieInfo.css\";\n\nconst MovieInfo = (MovieInfo) => {\n  let [currentMovie, setCurrentMovie] = useState([]);\n  let [ratings, setRating] = useState([]);\n\n  let adjustDate = (year) => {\n    let newDate = Date.parse(year);\n    let date = new Date(newDate);\n    var options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n    };\n\n    var result = date.toLocaleDateString(\"en\", options); // 10/29/2013\n\n    return result;\n  };\n\n  useEffect(() => {\n    if (MovieInfo.selected.length != 0) {\n      setRating(MovieInfo.selected.Ratings);\n      console.log(ratings);\n      // This will only run this function once\n      // will adjust the date format\n      MovieInfo.selected.Released = adjustDate(MovieInfo.selected.Released);\n\n      // This main reason that I am setting the state here is so that I can\n      // Force a re render\n      setCurrentMovie(MovieInfo.selected);\n      console.log(currentMovie);\n      console.log(MovieInfo.selected);\n    }\n  });\n\n  return (\n    <div>\n      {MovieInfo.selected.length !== 0 ? (\n        <div className=\"movieSectionInfo\">\n          <TypeIt options={{\n            strings: [MovieInfo.selected.Title],\n            speed: 100,\n            lifeLike: true,\n            cursor: false,\n       \n          }}\n            className=\"movieTitle\"></TypeIt>\n          <h6 className=\"rating\" style={{ marginTop: \"5%\"}}>\n            IMDB Rating - <p className=\"specialGlow\">{MovieInfo.selected.imdbRating} </p>\n          </h6>\n          <h6 className=\"rating\">Rating - {MovieInfo.selected.Rated} </h6>\n          <h6 className=\"releaseYear\">\n            {\" \"}\n            Release Year - {MovieInfo.selected.Year}{\" \"}\n          </h6>\n          <img src={MovieInfo.selected.Poster} className=\"moviePoster\" />\n          <p className=\"plotInfo\">{MovieInfo.selected.Plot}</p>\n\n          <Container>\n            <Row> \n            <Col sm={12} md={12} lg={4}>\n                <div className=\"infoSection\">\n                  <h6>Movie Information </h6>\n                  <p>{MovieInfo.selected.Actors} </p>\n                  <p>Director {MovieInfo.selected.Director} </p>\n                  <p>Awards {MovieInfo.selected.Awards}  </p>\n                  <p>Movie Length {MovieInfo.selected.Runtime} </p>\n                  <p>Official Release Date  {MovieInfo.selected.Released}</p>\n                  {MovieInfo.selected.Website != \"N/A\" ? (\n                    <p> Official Website -\n                      <ExternalLink href={MovieInfo.selected.Website}>\n                        {MovieInfo.selected.Website}\n                      </ExternalLink>\n                    </p>\n                  ) \n                  : null}\n                </div>\n              </Col>\n              <Col sm={12} md={12} lg={4}>\n                <div className=\"nyTimesSection\">\n                  <img src={nyTimesLogo} className=\"nyTimesLogo\" />\n                  <a href={MovieInfo.selected.link.url} className=\"nyTimesLink\">\n                    <p className=\"nyTimesLink\">{MovieInfo.selected.link.suggested_link_text}</p>\n                  </a>\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                </div>\n              </Col>\n              <Col sm={12} md={12} lg={4}>\n                <div className=\"ratingSection\">\n                  <h6>Available Ratings </h6>\n                  {ratings.map((db) => (\n                    <div>\n                      <p className=\"movieDatabase\">{db.Source}</p>\n                      <h6 className=\"movieDatabaseValue\"><p className=\"specialGlow\">{db.Value}</p></h6>\n                    </div>    \n                  ))}\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MovieInfo;\n\n",["60","61"],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Error/Error.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":5,"column":31,"nodeType":"68","messageId":"69","endLine":5,"endColumn":36},{"ruleId":"70","severity":1,"message":"71","line":73,"column":50,"nodeType":"72","messageId":"73","endLine":73,"endColumn":52},{"ruleId":"70","severity":1,"message":"71","line":83,"column":31,"nodeType":"72","messageId":"73","endLine":83,"endColumn":33},{"ruleId":"70","severity":1,"message":"71","line":114,"column":29,"nodeType":"72","messageId":"73","endLine":114,"endColumn":31},{"ruleId":"70","severity":1,"message":"71","line":114,"column":49,"nodeType":"72","messageId":"73","endLine":114,"endColumn":51},{"ruleId":"70","severity":1,"message":"71","line":116,"column":39,"nodeType":"72","messageId":"73","endLine":116,"endColumn":41},{"ruleId":"70","severity":1,"message":"71","line":116,"column":68,"nodeType":"72","messageId":"73","endLine":116,"endColumn":70},{"ruleId":"74","severity":1,"message":"75","line":118,"column":9,"nodeType":"76","endLine":118,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":123,"column":43,"nodeType":"72","messageId":"73","endLine":123,"endColumn":45},{"ruleId":"70","severity":1,"message":"77","line":128,"column":43,"nodeType":"72","messageId":"73","endLine":128,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":156,"column":39,"nodeType":"72","messageId":"73","endLine":156,"endColumn":41},{"ruleId":"70","severity":1,"message":"71","line":160,"column":23,"nodeType":"72","messageId":"73","endLine":160,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":2,"column":31,"nodeType":"68","messageId":"69","endLine":2,"endColumn":36},{"ruleId":"66","severity":1,"message":"78","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":12},{"ruleId":"79","severity":1,"message":"80","line":28,"column":3,"nodeType":"68","endLine":28,"endColumn":12,"suggestions":"81"},{"ruleId":"70","severity":1,"message":"77","line":29,"column":35,"nodeType":"72","messageId":"73","endLine":29,"endColumn":37},{"ruleId":"74","severity":1,"message":"75","line":64,"column":11,"nodeType":"76","endLine":64,"endColumn":74},{"ruleId":"70","severity":1,"message":"77","line":77,"column":47,"nodeType":"72","messageId":"73","endLine":77,"endColumn":49},{"ruleId":"74","severity":1,"message":"75","line":89,"column":19,"nodeType":"76","endLine":89,"endColumn":68},{"ruleId":"74","severity":1,"message":"75","line":93,"column":19,"nodeType":"76","endLine":93,"endColumn":62},{"ruleId":"74","severity":1,"message":"75","line":94,"column":19,"nodeType":"76","endLine":94,"endColumn":62},{"ruleId":"74","severity":1,"message":"75","line":95,"column":19,"nodeType":"76","endLine":95,"endColumn":62},{"ruleId":"74","severity":1,"message":"75","line":96,"column":19,"nodeType":"76","endLine":96,"endColumn":62},{"ruleId":"74","severity":1,"message":"75","line":97,"column":19,"nodeType":"76","endLine":97,"endColumn":62},{"ruleId":"62","replacedBy":"82"},{"ruleId":"64","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Badge' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'star' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setRating'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [MovieInfo.selected, ratings, currentMovie] as a second argument to the useEffect Hook.",["86"],["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Add dependencies array: [MovieInfo.selected, ratings, currentMovie]",{"range":"89","text":"90"},[1310,1310],", [MovieInfo.selected, ratings, currentMovie]"]