[{"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/index.js":"1","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/App.js":"2","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/reportWebVitals.js":"3","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Title/Title.js":"4","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Search/Search.js":"5","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/MovieInfo/MovieInfo.js":"6"},{"size":547,"mtime":1609123553366,"results":"7","hashOfConfig":"8"},{"size":281,"mtime":1609631629506,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1609088171872,"results":"10","hashOfConfig":"8"},{"size":189,"mtime":1609895084317,"results":"11","hashOfConfig":"8"},{"size":4829,"mtime":1609994103418,"results":"12","hashOfConfig":"8"},{"size":6128,"mtime":1610332340836,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"elpjck",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/index.js",[],["29","30"],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/App.js",["31"],"import './App.css';\nimport Title from './component/Title/Title';\nimport Search from './component/Search/Search';\nimport MovieInfo from './component/MovieInfo/MovieInfo';\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/reportWebVitals.js",[],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Title/Title.js",[],"/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/Search/Search.js",["32","33","34","35","36","37"],"import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col, Badge } from 'react-bootstrap';\nimport MovieInfo from '../MovieInfo/MovieInfo';\nimport './Search.css';\n\n\n\n\n\nconst Search = () => {\n\n  // Setting our hooks \n  let [movieTitle, setMovieTitle] = useState(\"\")\n  let [currentMovieOptions, setCurrentMovieOptions] = useState([]);\n  let [pageNation, setPageNation] = useState(1);\n  let [selectedMovie, setSelectedMovie] = useState([]);\n  let omdbApi = 'http://www.omdbapi.com/?apikey=2c533baf&t=';\n  let nyTimesApi = 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?query='\n  let omdbObject = {};\n  let fullMovieData = {}\n\n\n\n\n  // Setting the movie title user input\n  let movieTitleInput = (event) => {\n    setMovieTitle(event.target.value)\n  }\n\n  // Function to fetch the data from our first API call with the selected movie\n  let fetchData = (event) => {\n    nyTimesApi = nyTimesApi + movieTitle + '&api-key=vKMNXxALAeCJBsOuNv1USvjhAHkXhIFJ';\n    omdbApi = omdbApi + movieTitle;\n\n    fetch(omdbApi).then(response => response.json())\n      .then(omdbData => {\n        omdbObject = omdbData;\n      })\n\n\n    fetch(nyTimesApi).then(response => response.json())\n      .then(nyTimesData => {\n        for (var index = 0; index < nyTimesData.results.length; index++) {\n          if (nyTimesData.results[index].display_title.replace(/ /g, '') == movieTitle.replace(/ /g, '')) {\n            fullMovieData = {\n              ...omdbObject,\n              ...nyTimesData.results[index]\n            }\n            setSelectedMovie(fullMovieData)\n            return;\n          }\n        }\n        setCurrentMovieOptions(nyTimesData.results)\n      })\n  }\n\n  // This is ran when the movie is clicked, it will take the movie title\n  // and run it directly through the API\n  let selectedSearchData = (selectedMovieTitle) => {\n    omdbApi = omdbApi + selectedMovieTitle;\n    nyTimesApi =\n      nyTimesApi +\n      selectedMovieTitle +\n      \"&api-key=vKMNXxALAeCJBsOuNv1USvjhAHkXhIFJ\";\n\n    fetch(omdbApi)\n      .then((response) => response.json())\n      .then((omdbData) => {\n        omdbObject = omdbData;\n      });\n\n    fetch(nyTimesApi)\n      .then((response) => response.json())\n      .then((nyTimesData) => {\n        for (var index = 0; index < nyTimesData.results.length; index++) {\n          if (nyTimesData.results[index].display_title == selectedMovieTitle) {\n            fullMovieData = { ...omdbObject, ...nyTimesData.results[index] };\n            setSelectedMovie(fullMovieData);\n            return;\n          }\n        }\n      });\n  };\n\n\n  // Function call to change the offset to get the next movie titles\n  let pagenationOffset = () => {\n    let nyTimesOffsetApi = 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?query=' + movieTitle + '&offset=' + pageNation + '&api-key=vKMNXxALAeCJBsOuNv1USvjhAHkXhIFJ';\n\n    fetch(nyTimesOffsetApi).then(response => response.json())\n      .then(data => setCurrentMovieOptions(data.results)\n      )\n    // Changing the offset of the search results\n    setPageNation(pageNation + 1)\n  }\n\n\n\n\n  return (\n    <div id=\"searchSection\">\n      { selectedMovie.length == 0 ?\n        <div>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              {currentMovieOptions.length == 0 ? <FormControl className=\"searchBar\"\n                value={movieTitle}\n                onChange={movieTitleInput}\n                placeholder=\"Enter Movie Title\" />\n                : null}\n              <div>\n                <Container>\n                  <Row>\n                    {currentMovieOptions.map(movies =>\n                      (<Col md=\"4\">\n                        <span onClick={() => { selectedSearchData(movies.display_title) }}><p className=\"movieNames\">{movies.display_title}</p></span>\n                      </Col>\n                      ))}\n                  </Row>\n                  <Row>\n                    <Container>\n                      <Row>\n                        {currentMovieOptions.length !== 0 ? <Button onClick={pagenationOffset} className=\"nextPageButton\" size=\"sm\" variant=\"primary\">Next Page</Button> : null}\n                      </Row>\n                    </Container>\n                  </Row>\n                </Container>\n              </div>\n              <br />\n              <Form.Text className=\"text-muted\">\n                Created by :  Brian Todd\n          </Form.Text>\n            </Form.Group>\n          </Form>\n          {currentMovieOptions.length == 0 ? <Button onClick={fetchData} variant=\"outline-primary\">Search</Button> : null}\n        </div>\n        : null}\n      <div>\n        <MovieInfo selected={selectedMovie} />\n      </div>\n    </div>\n  )\n}\n\nexport default Search;\n","/Users/BTodd/Desktop/PersonalWork/MovieDatabase/my-app/src/component/MovieInfo/MovieInfo.js",["38","39","40","41","42","43","44","45","46","47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":5,"column":31,"nodeType":"55","messageId":"56","endLine":5,"endColumn":36},{"ruleId":"58","severity":1,"message":"59","line":47,"column":74,"nodeType":"60","messageId":"61","endLine":47,"endColumn":76},{"ruleId":"58","severity":1,"message":"59","line":79,"column":56,"nodeType":"60","messageId":"61","endLine":79,"endColumn":58},{"ruleId":"58","severity":1,"message":"59","line":105,"column":30,"nodeType":"60","messageId":"61","endLine":105,"endColumn":32},{"ruleId":"58","severity":1,"message":"59","line":109,"column":43,"nodeType":"60","messageId":"61","endLine":109,"endColumn":45},{"ruleId":"58","severity":1,"message":"59","line":138,"column":39,"nodeType":"60","messageId":"61","endLine":138,"endColumn":41},{"ruleId":"53","severity":1,"message":"57","line":2,"column":31,"nodeType":"55","messageId":"56","endLine":2,"endColumn":36},{"ruleId":"62","severity":1,"message":"63","line":24,"column":5,"nodeType":"55","endLine":24,"endColumn":14,"suggestions":"64"},{"ruleId":"58","severity":1,"message":"65","line":25,"column":39,"nodeType":"60","messageId":"61","endLine":25,"endColumn":41},{"ruleId":"66","severity":1,"message":"67","line":50,"column":21,"nodeType":"68","endLine":50,"endColumn":84},{"ruleId":"66","severity":1,"message":"67","line":69,"column":37,"nodeType":"68","endLine":69,"endColumn":86},{"ruleId":"66","severity":1,"message":"67","line":71,"column":37,"nodeType":"68","endLine":71,"endColumn":80},{"ruleId":"66","severity":1,"message":"67","line":72,"column":37,"nodeType":"68","endLine":72,"endColumn":80},{"ruleId":"66","severity":1,"message":"67","line":73,"column":37,"nodeType":"68","endLine":73,"endColumn":80},{"ruleId":"66","severity":1,"message":"67","line":74,"column":37,"nodeType":"68","endLine":74,"endColumn":80},{"ruleId":"66","severity":1,"message":"67","line":75,"column":37,"nodeType":"68","endLine":75,"endColumn":80},{"ruleId":"66","severity":1,"message":"67","line":76,"column":37,"nodeType":"68","endLine":76,"endColumn":80},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'MovieInfo' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setRating'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [MovieInfo.selected, ratings, currentMovie] as a second argument to the useEffect Hook.",["71"],"Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},"Add dependencies array: [MovieInfo.selected, ratings, currentMovie]",{"range":"74","text":"75"},[1292,1292],", [MovieInfo.selected, ratings, currentMovie]"]