{"version":3,"sources":["component/Title/Title.js","component/MovieInfo/img/nyTimesLogo.png","component/MovieInfo/img/straightLine.png","component/MovieInfo/img/starPng.png","component/MovieInfo/MovieInfo.js","component/Search/img/moviePng.png","component/Error/Error.js","component/Search/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Title","className","MovieInfo","useState","currentMovie","setCurrentMovie","ratings","setRating","useEffect","selected","length","Ratings","console","log","Released","year","newDate","Date","parse","toLocaleDateString","month","day","adjustDate","options","strings","speed","lifeLike","cursor","style","marginTop","imdbRating","Rated","Year","src","Poster","Plot","Container","Row","Col","sm","md","lg","Actors","Director","Awards","Runtime","Website","href","nyTimesLogo","link","url","suggested_link_text","line","map","db","Source","Value","Error","Button","onClick","window","location","reload","variant","Search","movieTitle","setMovieTitle","currentMovieOptions","setCurrentMovieOptions","pageNation","setPageNation","selectedMovie","setSelectedMovie","datafailure","setDataFailure","omdbApi","nyTimesApi","apiKey","fullMovieData","getOmdbObject","Promise","resolve","reject","fetch","then","response","json","omdbData","getNyTimesObject","offset","nyTimesData","results","fetchData","all","movies","Response","index","replace","toLowerCase","display_title","id","MovieLogo","Form","Group","FormControl","value","onChange","event","target","placeholder","movieOptions","pageNationOffset","size","Text","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb4eab8e.chunk.js","sourcesContent":["import React from \"react\";\nimport './Title.css';\n\nconst Title = () => {\n    return(\n    <div className=\"navBar\">\n      <h2 className=\"titleText\"> Movie Database </h2>\n      </div>\n    )\n}\n\nexport default Title;\n","export default __webpack_public_path__ + \"static/media/nyTimesLogo.a238ac4b.png\";","export default __webpack_public_path__ + \"static/media/straightLine.f7ffe2ec.png\";","export default __webpack_public_path__ + \"static/media/starPng.3ab43a53.png\";","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { ExternalLink } from \"react-external-link\";\nimport TypeIt from \"typeit-react\";\nimport nyTimesLogo from \"./img/nyTimesLogo.png\";\nimport star from \"./img/starPng.png\";\nimport line from \"./img/straightLine.png\";\nimport \"./MovieInfo.css\";\n\nconst MovieInfo = (MovieInfo) => {\n  let [currentMovie, setCurrentMovie] = useState([]);\n  let [ratings, setRating] = useState([]);\n\n  let adjustDate = (year) => {\n    let newDate = Date.parse(year);\n    let date = new Date(newDate);\n    var options = {\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n    };\n\n    var result = date.toLocaleDateString(\"en\", options); // 10/29/2013\n\n    return result;\n  };\n\n  useEffect(() => {\n    if (MovieInfo.selected.length != 0) {\n      setRating(MovieInfo.selected.Ratings);\n      console.log(ratings);\n      // This will only run this function once\n      // will adjust the date format\n      MovieInfo.selected.Released = adjustDate(MovieInfo.selected.Released);\n\n      // This main reason that I am setting the state here is so that I can\n      // Force a re render\n      setCurrentMovie(MovieInfo.selected);\n      console.log(currentMovie);\n      console.log(MovieInfo.selected);\n    }\n  });\n\n  return (\n    <div>\n      {MovieInfo.selected.length !== 0 ? (\n        <div className=\"movieSectionInfo\">\n          <TypeIt options={{\n            strings: [MovieInfo.selected.Title],\n            speed: 100,\n            lifeLike: true,\n            cursor: false,\n       \n          }}\n            className=\"movieTitle\"></TypeIt>\n          <h6 className=\"rating\" style={{ marginTop: \"5%\"}}>\n            IMDB Rating - <p className=\"specialGlow\">{MovieInfo.selected.imdbRating} </p>\n          </h6>\n          <h6 className=\"rating\">Rating - {MovieInfo.selected.Rated} </h6>\n          <h6 className=\"releaseYear\">\n            {\" \"}\n            Release Year - {MovieInfo.selected.Year}{\" \"}\n          </h6>\n          <img src={MovieInfo.selected.Poster} className=\"moviePoster\" />\n          <p className=\"plotInfo\">{MovieInfo.selected.Plot}</p>\n\n          <Container>\n            <Row> \n            <Col sm={12} md={12} lg={4}>\n                <div className=\"infoSection\">\n                  <h6>Movie Information </h6>\n                  <p>{MovieInfo.selected.Actors} </p>\n                  <p>Director {MovieInfo.selected.Director} </p>\n                  <p>Awards {MovieInfo.selected.Awards}  </p>\n                  <p>Movie Length {MovieInfo.selected.Runtime} </p>\n                  <p>Official Release Date  {MovieInfo.selected.Released}</p>\n                  {MovieInfo.selected.Website != \"N/A\" ? (\n                    <p> Official Website -\n                      <ExternalLink href={MovieInfo.selected.Website}>\n                        {MovieInfo.selected.Website}\n                      </ExternalLink>\n                    </p>\n                  ) \n                  : null}\n                </div>\n              </Col>\n              <Col sm={12} md={12} lg={4}>\n                <div className=\"nyTimesSection\">\n                  <img src={nyTimesLogo} className=\"nyTimesLogo\" />\n                  <a href={MovieInfo.selected.link.url} className=\"nyTimesLink\">\n                    <p className=\"nyTimesLink\">{MovieInfo.selected.link.suggested_link_text}</p>\n                  </a>\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                  <img src={line} className=\"straightLine\" />\n                </div>\n              </Col>\n              <Col sm={12} md={12} lg={4}>\n                <div className=\"ratingSection\">\n                  <h6>Available Ratings </h6>\n                  {ratings.map((db) => (\n                    <div>\n                      <p className=\"movieDatabase\">{db.Source}</p>\n                      <h6 className=\"movieDatabaseValue\"><p className=\"specialGlow\">{db.Value}</p></h6>\n                    </div>    \n                  ))}\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default MovieInfo;\n\n","export default __webpack_public_path__ + \"static/media/moviePng.aea75ff3.png\";","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport './Error.css';\n\nconst Error = () => {\n\n  const reloadPage = () => {\n    window.location.reload()\n  }\n  return (\n    <div>\n      <h2 className=\"errorMessage\">Movie Not Found</h2>\n      <div className=\"d-flex justify-content-center\">\n      <Button onClick={() => reloadPage()} className=\"reloadButton\" variant=\"outline-info\">Reload Search</Button> \n      </div>\n    </div>\n  )\n}\n\nexport default Error;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col, Badge } from 'react-bootstrap';\nimport MovieInfo from '../MovieInfo/MovieInfo';\nimport MovieLogo from '../Search/img/moviePng.png';\nimport Error from '../Error/Error';\nimport './Search.css';\n\n\n\n\n\nconst Search = () => {\n\n  // Setting our hooks \n  let [movieTitle, setMovieTitle] = useState(\"\")\n  let [currentMovieOptions, setCurrentMovieOptions] = useState([]);\n  let [pageNation, setPageNation] = useState(1);\n  let [selectedMovie, setSelectedMovie] = useState([]);\n  let [datafailure, setDataFailure] = useState(false);\n  let omdbApi = 'http://www.omdbapi.com/?apikey=2c533baf&t=';\n  let nyTimesApi = 'https://api.nytimes.com/svc/movies/v2/reviews/search.json?query=';\n  let apiKey = '&api-key=vKMNXxALAeCJBsOuNv1USvjhAHkXhIFJ'\n  let fullMovieData = {};\n\n\n\n\n  // Setting the movie title user input\n  let movieTitleInput = (event) => {\n    setMovieTitle(event.target.value)\n  }\n\n  // Fetch call for OMDB Database\n  let getOmdbObject = (movieTitle) => {\n    return new Promise((resolve, reject) => {\n      omdbApi = omdbApi + movieTitle;\n      resolve(fetch(omdbApi).then(response => response.json())\n        .then(omdbData => {\n          return omdbData;\n        }))\n\n    })\n  }\n\n  // Fetch call for NY Times Database\n  let getNyTimesObject = (movieTitle, offset) => {\n    return new Promise((resolve, reject) => {\n      // If an offset is present we will need to change the API\n      if (offset) {\n        nyTimesApi = nyTimesApi + movieTitle + '&offset=' + offset + apiKey;\n      }\n      else {\n        nyTimesApi = nyTimesApi + movieTitle + apiKey;\n      }\n\n      // Fetch call for NY Times API\n      resolve(fetch(nyTimesApi).then(response => response.json())\n        .then(nyTimesData => {\n          return nyTimesData.results;\n        })\n      )\n    })\n  }\n\n\n  // Fetch the data from our first API call with the selected movie\n  let fetchData = (movieTitle) => {\n    return Promise.all([getNyTimesObject(movieTitle), getOmdbObject(movieTitle)]).then((movies => {\n\n      if(movies[0] == null || movies[1].Response == false){\n        setDataFailure(true);\n        return;\n      }\n\n      for (var index = 0; index < movies[0].length; index++) {\n         // Setting movie title\n        movieTitle = movieTitle.replace(/\\s/g, '').toLowerCase();\n        let currentMovieTitle = movies[0][index].display_title.replace(/\\s/g, '').toLowerCase();\n        \n        if (currentMovieTitle == movieTitle) {\n          fullMovieData = {\n            ...movies[1],\n            ...movies[0][index]\n          }\n\n          setSelectedMovie(fullMovieData)\n          return;\n        }\n      }\n      setCurrentMovieOptions(movies[0])\n        // Changing the offset of the search results\n      setPageNation(pageNation + 1)\n\n    }))\n  }\n  \n \n  // Fetch call to change the offset to get the next movie titles\n  let pageNationOffset = (movieTitle) => {\n   return Promise.all([getNyTimesObject(movieTitle, pageNation)]).then((movieOptions => {\n      setCurrentMovieOptions(movieOptions[0])\n      setPageNation(pageNation + 1)\n   }))}\n\n\n\n\n\n  return (\n    <div id=\"searchSection\">\n      {selectedMovie.length == 0 && datafailure == false ?\n        <div>\n          {currentMovieOptions.length == 0 && selectedMovie.length == 0 ? \n          <div className=\"imageDiv\">\n        <img className=\"movieLogo\" src={MovieLogo}  />\n            </div>\n            : null }\n          <Form>\n            <Form.Group>\n              {currentMovieOptions.length == 0 ? <FormControl className=\"searchBar\"\n                value={movieTitle}\n                onChange={movieTitleInput}\n                placeholder=\"Enter Movie Title\" />\n                : null}\n              {currentMovieOptions.length != 0 ?\n              <div>\n                <Container>\n           \n                  <h6 className=\"movieOptionTitle\">Similar Movie Title Names</h6>\n                  <Row>\n                    {currentMovieOptions.map(movies =>\n                      (<Col md=\"4\">\n                        <span onClick={() => {fetchData(movies.display_title)}}><p className=\"movieNames\">{movies.display_title}</p></span>\n                      </Col>\n                      ))}\n                  </Row>\n                  <Row>\n                    <Container>\n                      <Row>\n                        {currentMovieOptions.length !== 0 ? <Button onClick={() => pageNationOffset(movieTitle)} className=\"nextPageButton\" size=\"sm\" variant=\"primary\">Next Page</Button> : null}\n                      </Row> \n                    </Container>\n                  </Row>\n                </Container>\n              </div> : null }\n              <br />\n              <Form.Text className=\"text-muted\">\n                Created by :  Brian Todd\n          </Form.Text>\n            </Form.Group>\n          </Form>\n          <div className=\"d-flex justify-content-center\">\n          {currentMovieOptions.length == 0 ? <Button onClick={() => fetchData(movieTitle)} className=\"searchButton\" variant=\"outline-info\">Search</Button> : null}\n          </div>\n        </div>\n        : null}\n        { datafailure == false ? \n      <div>\n        <MovieInfo selected={selectedMovie} />\n      </div> :\n      <div>\n        <Error />\n        </div>\n}\n    </div>\n  )\n}\n\nexport default Search;\n\n","import './App.css';\nimport Title from './component/Title/Title';\nimport Search from './component/Search/Search';\n\nfunction App() {\n  return (\n    <div>\n      <Title />\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}